#locations 4
#trans 5
#clocks 2
#actions 1
#init 0

location: 0
invar: Y <= 4 AND X < 2
trans:
ACT -1; RESET {  }; goto 0
ACT 0; RESET { X }; goto 1
ACT 0; RESET { Y }; goto 3

location: 0
invar: Y > 4 AND X < 2
trans:
ACT -1; RESET {  }; goto 0
ACT 0; RESET { X }; goto 1
ACT 0; RESET { Y }; goto 3

location: 0
invar: X >= 2 AND Y <= 4
trans:
ACT -1; RESET {  }; goto 0
ACT 0; RESET { X }; goto 1
ACT 0; RESET { Y }; goto 3

location: 0
invar: Y > 4 AND X >= 2
trans:
ACT -1; RESET {  }; goto 0
ACT 0; RESET { X }; goto 1
ACT 0; RESET { Y }; goto 3

location: 1
invar: X >= 2 AND Y <= 4
trans:
ACT -1; RESET {  }; goto 1
ACT 0; RESET {  }; goto 0
ACT 0; RESET {  }; goto 2

location: 1
invar: Y <= 4 AND X < 2
trans:
ACT -1; RESET {  }; goto 1
ACT 0; RESET {  }; goto 0

location: 1
invar: Y > 4 AND X >= 2
trans:
ACT -1; RESET {  }; goto 1
ACT 0; RESET {  }; goto 0
ACT 0; RESET {  }; goto 2

location: 1
invar: Y > 4 AND X < 2
trans:
ACT -1; RESET {  }; goto 1
ACT 0; RESET {  }; goto 0

location: 2
invar: TRUE
trans:
ACT -1; RESET {  }; goto 2
ACT 0; RESET {  }; goto 0

location: 3
invar: X >= 2 AND Y <= 4
trans:
ACT -1; RESET {  }; goto 3

location: 3
invar: Y <= 4 AND X < 2
trans:
ACT -1; RESET {  }; goto 3

location: 3
invar: Y > 4 AND X >= 2
trans:
ACT -1; RESET {  }; goto 3

location: 3
invar: Y > 4 AND X < 2
trans:
ACT -1; RESET {  }; goto 3
dequeue got called!
qhd = 0, zone_list length = 1 before split
constraint_list length = 5
qhd = 0, zone_list length = 4 after split
Starting with 0 elements of the tree of qhd.
Done with elements of the tree of qhd.
Starting with successors of qhd.
A successor arrived.
constraint_list length = 4
A successor left.
A successor arrived.
constraint_list length = 4
A successor left.
Done with the successors of qhd.
queue length now = 0
