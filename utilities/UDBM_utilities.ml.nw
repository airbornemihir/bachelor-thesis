\subsection{UDBM\_utilities.ml}
This file provides some essential higher-level utilities that involve DBM operations.

<<UDBM_utilities.ml>>=
open Zone_stubs
open Grammar_types

let dbm_clock_reset_operation operation clock_names clock_resets dbm =
  String_set.fold
    operation
    clock_resets
    dbm

@ 
\begin{itemize}
\item This function implements post-reset on DBM.
<<UDBM_utilities.ml>>=
let dbm_after_clock_resets clock_name_map =
  dbm_clock_reset_operation
    (fun clock_name dbm ->
      dbm_updateValue
        dbm
        (1 + (String_map.find clock_name clock_name_map))
        0
    )
    clock_name_map

@ 
\item This function implements pre-reset on DBM, without checking the
zero-ness of the clock in question.
<<UDBM_utilities.ml>>=
let dbm_without_reset_clocks clock_name_map =
  dbm_clock_reset_operation
    (fun clock_name dbm ->
      dbm_freeClock
        dbm
        (1 + (String_map.find clock_name clock_name_map))
    )
    clock_name_map

@ 
\item Turns a unit clock constraint into a list of \texttt{(i, j,
                                                            constraint,
                                                            bound)} constraints.
<<UDBM_utilities.ml>>=
let unit_clock_constraint_to_constraint_list_option
    clock_name_map
    unit_clock_constraint =
  let
      index cn =
    1 + 
      (String_map.find
         cn
         clock_name_map)
  in
  match unit_clock_constraint with
    True -> Some []
  | False -> None 
  | Lt (cn, n) -> Some [(index cn, 0, true, n)]
  | Le (cn, n) -> Some [(index cn, 0, false, n)]
  | Eq (cn, n) -> Some [(0, index cn, false, 0-n);
                        (index cn, 0, false, n)
                       ]
  | Ge (cn, n) -> Some [(0, index cn, false, 0-n)]
  | Gt (cn, n) -> Some [(0, index cn, true, 0-n)]

@ 
\item This function turns clock constraints to DBM, except when they
  are empty, in which case it returns None.
<<UDBM_utilities.ml>>=
let rec clock_constraint_to_dbm_option clock_name_map clock_constraint =
  let
      dim = (1 + String_map.cardinal clock_name_map)
  in
  List.fold_left
    (function
    | None -> (function unit_clock_constraint -> None)
    | (Some partial_dbm) ->
      (function unit_clock_constraint -> 
        (match
          unit_clock_constraint_to_constraint_list_option
            clock_name_map
            unit_clock_constraint
        with
          None -> None
        | Some constraint_list ->
          let
              dst =
            List.fold_left (*We just KNOW this folding will work.*)
              (function partial_dbm ->
                function (i, j, strictness, bound) ->
                  dbm_constrain_using_tuple
                    partial_dbm
                    (i, j, strictness, bound)
              )
              (dbm_init dim)
              constraint_list
          in
          if
            (dbm_haveIntersection
               dst
               partial_dbm
            )
          then
            Some (dbm_intersection partial_dbm dst)
          else
            None
        )
      )
    )
    (Some (dbm_init dim))
    clock_constraint

@ 
\item This function checks whether two given clock constraints have a non-empty intersection.
<<UDBM_utilities.ml>>=
let clock_constraint_haveIntersection clock_names c1 c2 =
    match
      (clock_constraint_to_dbm_option
         clock_names
         c1)
    with
      None -> false
    | Some dst ->
      (match
          (clock_constraint_to_dbm_option
             clock_names
             c2)
       with
         None -> false
       | Some src -> (dbm_haveIntersection dst src)
      )

@ 
\item This function turns a list of \texttt{i, j, strictness, bound}
constraints into a string.
<<UDBM_utilities.ml>>=
let constraint_list_to_string
    (clock_names:string array)
    (constraint_list:(int * int * bool * int) list) =
  let
      clock_names = Array.of_list ("0"::(Array.to_list clock_names))
  in
  "[" ^
    (String.concat
       "; "
       (List.map
          (function (i, j, strictness, bound) ->
            if
              (bound > 0)
            then
              (clock_names.(i)) ^
                (if (j <> 0) then " - " ^ (clock_names.(j)) else "" ) ^
                (if strictness then " < " else " <= ") ^ 
                (string_of_int (bound))
            else
              if
                (bound < 0)
              then
                (clock_names.(j)) ^
                  (if (i <> 0) then " - " ^ (clock_names.(i)) else "" ) ^
                  (if strictness then " > " else " >= ") ^ 
                  (string_of_int (-bound))
              else
                (clock_names.(j)) ^ (if strictness then " > " else " >= ") ^
                  (clock_names.(i))
          )
        constraint_list
       )
    ) ^ "]"  

@ 
\item This function turns a DBM into a string.
<<UDBM_utilities.ml>>=
let dbm_to_string clock_names dbm =
  constraint_list_to_string clock_names (dbm_toConstraintList dbm)

@ 
\item This function turns a list of \texttt{i, j, strictness, bound}
constraints into a DBM if their intersection is non-empty, and None
otherwise.
<<UDBM_utilities.ml>>=
let constraint_list_to_dbm_option dim constraint_list =
  List.fold_left
    (function
    | None -> (function _ -> None)
    | Some dbm ->
      (function (i, j, strictness, bound) ->
        let
            dbm =
          dbm_constrain_using_tuple
            dbm
            (i,
	     j,
	     strictness,
             bound
            )
        in
        if
          dbm_isEmpty dbm
        then
          None
        else
          Some dbm
      )
    )
    (Some (dbm_init dim))
    constraint_list

@ 
\item This function splits a DBM using an \texttt{i, j, strictness,
bound} constraint.
<<UDBM_utilities.ml>>=
let split_dbm_on_constraint dim dbm (i, j, strictness, bound) =
  List.concat
    (List.map
       (function (i1, j1, strictness1, bound1) ->
         let
             dbm = 
           dbm_constrain_using_tuple
             dbm
             (i1, j1, strictness1, bound1)
         in
         if
           dbm_isEmpty dbm
         then
           []
         else
           [dbm]
        )
       [(i, j, strictness, bound);
        (j, i, not strictness, 0-bound)]
    )

@ 
\item This function splits a DBM using another DBM.
<<UDBM_utilities.ml>>=
let split_dbm_on_dbm dim dbm1 dbm2 =
  if
    not (dbm_haveIntersection dbm1 dbm2)
  then
    [dbm1]
  else
    List.fold_left
      (function dbm_list -> function (i, j, strictness, bound) ->
        match
          (List.partition
             (dbm_haveIntersection dbm2)
             dbm_list
          )
        with
        | (dbm_list1, dbm_list2) ->
          List.concat
            (dbm_list2 ::
               (List.map
                  (function dbm ->
                    split_dbm_on_constraint
                      dim
                      dbm
                      (i, j, strictness, bound)
                  )
                  dbm_list1
               )
            )
      )
      [dbm1]
      (dbm_toConstraintList dbm2)

@ 
\item This function splits a list of DBM using an \texttt{i, j,
strictness, bound} constraint.
<<UDBM_utilities.ml>>=
let split_dbm_list_on_constraint
    dim
    dbm_list
    (i, j, strictness, bound) =
  List.concat
    (List.map
       (function dbm ->
         split_dbm_on_constraint
           dim
           dbm
           (i, j, strictness, bound)
       )
       dbm_list
    )

@ 
\item This function splits a list of DBM using a list of \texttt{i, j,
strictness, bound} constraints.
<<UDBM_utilities.ml>>=
let split_dbm_list_on_constraint_list
    dim
    dbm_list
    constraint_list =
  List.fold_left
    (split_dbm_list_on_constraint
       dim
    )
    dbm_list
    constraint_list

@ 
\item This function splits a list of DBM using a list of DBM.
<<UDBM_utilities.ml>>=
let split_dbm_list_on_dbm
    dim
    dbm_list
    dbm =
  (* split_dbm_list_on_constraint_list *)
  (*   dim *)
  (*   dbm_list *)
  (*   (dbm_toConstraintList dbm) *)
  List.concat
    (List.map
       (function dbm1 -> split_dbm_on_dbm dim dbm1 dbm)
       dbm_list
    )
    
@ 
\item This function splits a list of DBM using a clock constraint.
<<UDBM_utilities.ml>>=
let split_dbm_list_on_clock_constraint
    clock_name_map
    dbm_list
    clock_constraint =
  let
      dim = 1 + String_map.cardinal clock_name_map
  in
  match
    (clock_constraint_to_dbm_option clock_name_map clock_constraint)
  with
  | None -> dbm_list
  | Some dbm -> split_dbm_list_on_dbm dim dbm_list dbm

@ 
\end{itemize}

<<UDBM_utilities.ml>>=
module Test =
struct
  open Test_base

  let test17 =
    if
      None <>
        (clock_constraint_to_dbm_option
           (List.fold_right
              (fun (x, y) -> String_map.add x y)
              [("X", 0); ("Y", 1)]
              String_map.empty)
           [Le("X", 4); Ge ("X", 3)]
        )
    then
      "test17 passed"
    else
      "test17 failed"

  let test18 =
    if
      None = (clock_constraint_to_dbm_option
                (List.fold_right
                   (fun (x, y) -> String_map.add x y)
                   [("X", 0); ("Y", 1)]
                   String_map.empty)
                [Le("X", 3); Ge ("X", 4)]
    )
    then
      "test18 passed"
    else
      "test18 failed"

  let verify_dbm dim dbm expected =
    let
        found = dbm_toConstraintList dbm
    in
    List.length found = List.length expected &&
        List.for_all
    (function e ->
      (List.length (List.filter ((=) e) found))
      =
        (List.length (List.filter ((=) e) expected))
    )
    expected

  let verify_dbm_translation clock_name_map clock_constraint expected =
    match
      (clock_constraint_to_dbm_option clock_name_map clock_constraint)
    with
    | None -> false
    | Some dbm -> verify_dbm (1 + String_map.cardinal clock_name_map) dbm expected

  let dim01 = 3

  let dbm01 =
    (dbm_updateValue
       (dbm_updateValue
          (dbm_init dim01)
          2
          3
       )
       1
       2
    )

  let test45 =
    if
      verify_dbm
        dim01
        dbm01
        [(2, 0, false, 3); (1, 2, false, -1); (0, 1, false, -2)]
    then
      "test45 passed"
    else
      "test45 failed"

  let dim02 = dim01

  let dbm02 =
    dbm_without_reset_clocks
      (List.fold_left
         (fun m (x, y) -> String_map.add x y m)
         String_map.empty
         [("X", 0); ("Y", 1)]
      )
      (String_set.singleton "X")
      dbm01 

  let test46 =
    if
      verify_dbm
        dim02
        dbm02
        [(2, 0, false, 3); (0, 2, false, -3)]
    then
      "test46 passed"
    else
      "test46 failed"

  let dim03 = dim01

  let dbm03 =
    dbm_after_clock_resets
      (List.fold_left
         (fun m (x, y) -> String_map.add x y m)
         String_map.empty
         [("X", 0); ("Y", 1)]
      )
      (String_set.singleton "X")
      dbm01 

  let test47 =
    if
      verify_dbm
        dim03
        dbm03
        [(2, 0, false, 3); (1, 2, false, -3)]
    then
      "test47 passed"
    else
      ("test47 failed, found  = " ^ (dbm_to_string [|"X"; "Y"|] dbm02))

  let test48 =
    if
      (match
          (constraint_list_to_dbm_option
             2
             [(0, 1, false, -3); (1, 0, true, 3)]
          )
       with
       | None -> true
       | _ -> false
      )
    then
      "test48 passed"
    else
      "test48 failed"

  let test49 =
    let dim = 2 in
    if
      (match
          (constraint_list_to_dbm_option
             dim
             [(0, 1, false, -3); (1, 0, false, 3)]
          )
       with
       | None -> false
       | Some dbm ->
         verify_dbm
           dim
           dbm
           [(0, 1, false, -3); (1, 0, false, 3)]
      )
    then
      "test49 passed"
    else
      "test49 failed"

  let dim04 = 3

  let dbm04 =
    match
      (constraint_list_to_dbm_option
         dim04
         [(2, 0, false, 3); (1, 0, false, 3)]
      )
    with
    | None -> (dbm_init dim04) (* This is not supposed to happen! *)
    | Some dbm04 -> dbm04

  let test50 =
    if
      verify_dbm
        dim04
        dbm04
        [(2, 0, false, 3); (1, 0, false, 3)]
    then
      "test50 passed"
    else
      "test50 failed"

  let verify_split dim found expected = 
    (List.length found = List.length expected) &&
      (List.for_all
         (function e ->
           (List.length
              (List.filter
                 (function f ->
                   verify_dbm dim f e
                 )
                 found)
           )
           =
             (List.length (List.filter ((=) e) expected))
         )
         expected
      )

  let test51 =
    let
        found =
      split_dbm_on_constraint dim04 dbm04 (1, 2, false, 2)
    in
    let
        expected =
      [[(2, 0, false, 3); (1, 0, false, 3); (1, 2, false, 2)];
       [(1, 0, false, 3); (2, 1, true, -2)]]
    in
    if
      verify_split dim04 found expected
    then
      "test51 passed"
    else
      "test51 failed"
        
  let test52 =
    let
        found =
      split_dbm_on_constraint dim04 dbm04 (2, 1, true, -2)
    in
    let
        expected =
      [[(2, 0, false, 3); (1, 0, false, 3); (1, 2, false, 2)];
       [(1, 0, false, 3); (2, 1, true, -2)]]
    in
    if
      verify_split dim04 found expected
    then
      "test52 passed"
    else
      "test52 failed"
        
  let test53 =
    let
        found =
      split_dbm_on_constraint dim04 dbm04 (2, 1, true, -3)
    in
    let
        expected =
      [[(2, 0, false, 3); (1, 0, false, 3)]]
    in
    if
      verify_split dim04 found expected
    then
      "test53 passed"
    else
      "test53 failed"
        
  let test54 =
    let
        found =
      split_dbm_list_on_constraint_list
        dim04
        [dbm04]
        [(2, 1, true, -1); (2, 1, true, 1)]
    in
    let
        expected =
      [[(1, 0, false, 3); (2, 1, true, -1)];
       [(2, 0, false, 3); (1, 0, false, 3); (1, 2, false, 1); (2, 1, true, 1)];
       [(2, 0, false, 3); (1, 2, false, -1)]
      ]
    in
    if
      verify_split dim04 found expected
    then
      "test54 passed"
    else
      ("test54 failed, dbm are [" ^
          (String.concat
             "; "
             (List.map
                (dbm_to_string [|"X"; "Y"|])
                found
             )
          )
       ^ "]")

  let dim05 = dim04

  let dbm05 =
    match
      (constraint_list_to_dbm_option
         dim05
         [(1, 2, false, 2); (2, 1, false, 2)]
      )
    with
    | None -> (dbm_init dim05) (* This is not supposed to happen! *)
    | Some dbm05 -> dbm05

  let test55 =
    if
      verify_dbm
        dim05
        dbm05
        [(1, 2, false, 2); (2, 1, false, 2)]
    then
      "test55 passed"
    else
      "test55 failed"
        
  let test56 =
    let
        found =
      split_dbm_list_on_dbm
        dim04
        [dbm04]
        dbm05
    in
    let
        expected =
      [[(1, 0, false, 3); (2, 1, true, -2)];
       [(2, 0, false, 3); (1, 0, false, 3); (1, 2, false, 2); (2, 1, false, 2)];
       [(2, 0, false, 3); (1, 2, true, -2)]
      ]
    in
    if
      verify_split dim04 found expected
    then
      "test56 passed"
    else
      ("test56 failed, dbm are [" ^
          (String.concat
             "; "
             (List.map
                (dbm_to_string [|"X"; "Y"|])
                found
             )
          )
       ^ "]")

  let test57 =
    let
        found =
      split_dbm_list_on_clock_constraint
        (List.fold_left
           (fun m (x, y) -> String_map.add x y m)
           String_map.empty
           [("X", 0); ("Y", 1)]
        )
        [dbm05]
        [Le ("X", 3); Le ("Y", 3)]
    in
    let
        expected =
      (* [[(2, 0, false, 3); (1, 0, false, 3); (1, 2, false, 2); (2, 1, false, 2)]; *)
      (*  [(0, 2, true, -3); (1, 0, false, 3); (2, 1, false, 2)]; *)
      (*  [(2, 0, false, 3); (0, 1, true, -3); (1, 2, false, 2)]; *)
      (*  [(0, 2, true, -3); (0, 1, true, -3); (1, 2, false, 2); (2, 1, false, 2)] *)
      (* ] *)
      [[(2, 0, false, 3); (1, 0, false, 3); (1, 2, false, 2); (2, 1, false, 2)];
       [(2, 0, false, 3); (0, 1, true, -3); (1, 2, false, 2)];
       [(0, 2, true, -3); (1, 2, false, 2); (2, 1, false, 2)]
      ]
    in
    if
      verify_split dim04 found expected
    then
      "test57 passed"
    else
      ("test57 failed, dbm are [" ^
          (String.concat
             "; "
             (List.map
                (dbm_to_string [|"X"; "Y"|])
                found
             )
          )
       ^ "]")

  let dim09 = dim04

  let dbm09 =
    match
      (constraint_list_to_dbm_option
         dim09
         [(2, 1, false, -1); (1, 2, false, 1); (0, 1, true, -1)]
      )
    with
    | None -> (dbm_init dim09) (* This is not supposed to happen! *)
    | Some dbm09 -> dbm09

  let test76 =
    if
      verify_dbm
        dim09
        dbm09
        [(2, 1, false, -1); (1, 2, false, 1); (0, 1, true, -1)]
    then
      "test76 passed"
    else
      "test76 failed"

  let dim10 = dim04

  let dbm10 =
    match
      (constraint_list_to_dbm_option
         dim10
         [(2, 0, false, 1); (1, 2, false, 0); (0, 1, false, -1)]
      )
    with
    | None -> (dbm_init dim10) (* This is not supposed to happen! *)
    | Some dbm10 -> dbm10

  let test77 =
    if
      verify_dbm
        dim10
        dbm10
        [(2, 0, false, 1); (1, 2, false, 0); (0, 1, false, -1)]
    then
      "test77 passed"
    else
      "test77 failed"

  let test78 =
    let
        found =
      split_dbm_on_dbm 3 dbm09 dbm10
    in
    let
        expected =
      [[(1, 2, false, 1); (2, 1, false, -1); (0, 1, true, -1)]]
    in
    if
      verify_split 3 found expected
    then
      "test78 passed"
    else
      ("test78 failed, dbm are [" ^
          (String.concat
             "; "
             (List.map
                (dbm_to_string [|"X"; "Y"|])
                found
             )
          )
       ^ "]")

  let test79 =
    if
      dbm_haveIntersection dbm09 dbm10
    then
      "test79 failed"
    else
      "test79 passed"

end
  
