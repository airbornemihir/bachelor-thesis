<<grammar_types.ml>>=
module Valuation = Map.Make (String)
type clock = {clockname:string; lastreset: float}
type comparator = Lt | Le | Eq | Ge | Gt
type proposition = True | False | Comparison of string*comparator*int | And of proposition list
type transition = {condition: proposition; clockresets: string array; nextlocation: int}
type location = {locationindex:int; invariant:proposition; departures: transition array}
type timedautomaton = {
  numlocations: int;
  numtrans: int;
  numclocks: int;
  numinit: int;
  clocknames: string array;
  locations: location array
}
