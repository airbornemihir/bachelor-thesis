<<grammar_types.mli>>=
module Valuation: Map.S with type key=string
type comparator = Lt | Le | Eq | Ge | Gt
type proposition = True | False | Comparison of string*comparator*int | And of proposition list
type transition = {condition: proposition; clock_resets: string array; next_location: int}
type location = {location_index:int; invariant:proposition; departures: transition array}
type timed_automaton = {
  numlocations: int;
  numtrans: int;
  numclocks: int;
  numinit: int;
  clock_names: string array;
  locations: location array
}
type state = {
  location: int;
  valuation: float Valuation.t
}
