<<grammar_types.mli>>=
module Valuation: Map.S with type key=string

<<grammar_types.ml>>=
module Valuation = Map.Make (String)

<<grammar_types.mli>>=
type comparator = Lt | Le | Eq | Ge | Gt

<<grammar_types.ml>>=
type comparator = Lt | Le | Eq | Ge | Gt

<<grammar_types.mli>>=
type proposition =
  True
| False
| Comparison of string*comparator*int
| And of proposition list

<<grammar_types.ml>>=
type proposition =
  True
| False
| Comparison of string*comparator*int
| And of proposition list

<<grammar_types.mli>>=
type transition = {
  condition: proposition;
  clock_resets: string array;
  next_location: int
}

<<grammar_types.ml>>=
type transition = {
  condition: proposition;
  clock_resets: string array;
  next_location: int
}

<<grammar_types.mli>>=
type location = {
  location_index:int;
  invariant:proposition;
  departures: transition array
}

<<grammar_types.ml>>=
type location = {
  location_index:int;
  invariant:proposition;
  departures: transition array
}

<<grammar_types.mli>>=
type timed_automaton = {
  numlocations: int;
  numtrans: int;
  numclocks: int;
  numinit: int;
  clock_names: string array;
  locations: location array
}

<<grammar_types.ml>>=
type timed_automaton = {
  numlocations: int;
  numtrans: int;
  numclocks: int;
  numinit: int;
  clock_names: string array;
  locations: location array
}

<<grammar_types.mli>>=
type state = {
  location: int;
  valuation: float Valuation.t
}

<<grammar_types.ml>>=
type state = {
  location: int;
  valuation: float Valuation.t
}
