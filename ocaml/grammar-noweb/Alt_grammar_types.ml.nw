\subsection{Alt_grammar\_types.ml}
This file provides the essential datatypes we work with.

<<Alt_grammar_types.ml>>=
open Zone_stubs
open Graph

type unit_clock_constraint = True
                       | False
                       | Lt of string*int
                       | Le of string*int
                       | Eq of string*int
                       | Ge of string*int
                       | Gt of string*int

type clock_constraint = unit_clock_constraint list

module String_set =
  Set.Make (
    struct
      type t = string
      let compare = Pervasives.compare
    end
  )

type transition_label = {
  condition: clock_constraint;
  action: int;
  clock_resets: String_set.t
}

type location_label = {
  location_index: int;
  (* invariant: clock_constraint; *)
}

module Location_graph =
  Persistent.Digraph.ConcreteBidirectionalLabeled
    (struct
      type t = location_label
      let compare = Pervasives.compare
      let hash = Hashtbl.hash
      let equal = Pervasives.(=)
     end)
    (struct
      type t = transition_label
      let compare = Pervasives.compare
      let default = {
        action = -1;
        condition = [False];
        clock_resets = String_set.empty
      }
     end)

module Location_invariant_map =
  Map.Make (
    struct
      type t = location_label
      let compare = Pervasives.compare
    end
  )

type timed_automaton = {
  numlocations: int;
  numtrans: int;
  numclocks: int;
  numactions: int;
  numinit: location_label;
  clock_names: String_set.t;
  location_graph: Location_graph.t;
  location_invariant_map: clock_constraint Location_invariant_map.t
}

type zone_using_list = {
  zone_location1: int;
  zone_constraint1: clock_constraint
}

type zone_using_dbm = {
  zone_location2: int;
  zone_constraint2: dbm_struct_t
}

module Test =
  struct
    
  end
