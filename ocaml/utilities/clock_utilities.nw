\begin{itemize}

<<clock_utilities.ml>>=
  open Grammar_types

@ 
\item This function creates a valuation for the given timed automaton
  where all the clocks are set to zero.
<<clock_utilities.ml>>=
let zero_valuation ta = List.fold_right (function clock_name -> (function valuation
-> Valuation.add clock_name 0.0 valuation)) (Array.to_list ta.clock_names) (Valuation.empty)

@ 
\item This function pushes all the clocks forward by a time delay.
<<clock_utilities.ml>>=
let add_delay valuation delay = Valuation.map (function clock_value ->
  clock_value +. delay) valuation

@ 
\item This function resets the specified clocks.
<<clock_utilities.ml>>=
  let reset_clocks valuation clock_namelist =
    List.fold_left
      (function valuation ->
	function clock_name ->
	  if
	    Valuation.mem clock_name valuation (*this should always be
						 true, but who knows
						 these days?*)
	  then
	    Valuation.add clock_name 0.0 valuation
	  else
	    valuation
      )
      valuation
      clock_namelist

let rec max_valuation ta proposition = (
  let
      default_valuation =
    zero_valuation
      ta
  in
  match proposition with
    True -> default_valuation
  | False -> default_valuation
  | Comparison (cn, _, n) -> (if
      Valuation.mem cn default_valuation (*this should always be true, but who
  knows these days?*)
    then
      Valuation.add
	cn
	(float_of_int n)
	default_valuation
    else
      default_valuation
    )
  | And propositions ->
    (List.fold_left
       (function valuation ->
	 max_valuation ta
       )
       default_valuation
       propositions
    )
)

let max_valuations ta =
  Array.map
    (function location ->
      (max_valuation ta location.invariant)
    )
    ta.locations

@ 
\end{itemize}
