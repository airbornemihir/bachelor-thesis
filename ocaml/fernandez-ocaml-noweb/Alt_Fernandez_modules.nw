\subsection{Alt_Fernandez_modules.ml}
This file provides an alternate implementation of Fernandez' algorithm
    using Ocamlgraph.

<<Alt_Fernandez_modules.ml>>=
open Graph

module type LTS_ACTION_TYPE = 
sig
  include Sig.ORDERED_TYPE_DFT
  type action = t
  module ActionSet : Set.S with type elt=action
  val actions: ActionSet.t
end

module LTS_Functor = 
  functor (V : Sig.COMPARABLE) -> 
    functor (E : LTS_ACTION_TYPE) ->
      (struct
        let mod_add_edge add_edge g v1 v2 =
          if
            E.ActionSet.mem E.default (E.actions)
          then
            add_edge g v1 v2
          else
            raise (Invalid_argument "Invalid action.")
          
        let mod_add_edge_e add_edge_e g (v1, e, v2) =
          if
            E.ActionSet.mem e (E.actions)
          then
            add_edge_e g (v1, e, v2)
          else
            raise (Invalid_argument "Invalid action.")
              
        module Base = Persistent.Digraph.ConcreteBidirectionalLabeled
          (V) (E)
        include Base
          
        let add_edge_e = mod_add_edge_e add_edge_e
        let add_edge = mod_add_edge add_edge
       end
         : Sig.P  with type V.t = V.t and type V.label = V.t
                  and type E.t = V.t * E.t * V.t and type E.label = E.t
      )
