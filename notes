;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

Front end for timed automata{Oded Maler,Patricia Bouyer},Autograph (possibly non-free) (likely in Ocaml), UPPAAL 

Coq proof of Fernandez' algorithm.

Forgetfulness of time durations and timing constraints, invariants et al. - aceto's book

Tripakis' paper on Zone Valuation Graphs

CAV paper by Guha and Arun-Kumar

Paper on prebisimilarity

strategy for performance based timed prebisimulation

--Meeting with Shibashis

Implement the algorithm on page 12 of the CAV paper.

Check for time abstracted bisimulation.
-Refresh timed behavioural equivalences.
-Try out Minim.
-Read CAV paper and Tripakis paper again.
-Parse two timed automata.
-Create the zone-valuation graph (from page 12 CAV) and then check for strong bisimulation between the zone-valuation graph.
--Create one LTS by combining the node sets of both these zone valuation graphs by adding an artificial parent node and adding edges with two different new labels.
--Then check for strong bisimilarity. (modularise this later.)

Valuation representation?
-Clocks can be an array.

-Global parameter which measures absolute time.

-Valuation calculations will use absolute time.

-Associate a  history of clock resets with each clock name. Taken together with the absolute time, we get to know the current value of any clock.

Sanity checks?
-Check for illegal clock names, illegal location indices etc right after parsing.

Other things
-Simulate a finite run of an automaton. This is a useful debugging tool.

